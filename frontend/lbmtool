#!/usr/bin/env python2
import os
import argparse
import subprocess

import lbm

def save_program(program, subsystem, program_output_name, program_source_file,
        expression, debug, save_intermediates):
    program_template = """
#include "libbpf.h"

const char * prog_name = "{prog_name}";
const char * prog_source_file = "{prog_file}";
unsigned int prog_subsystem = {prog_subsystem}; // Subsystem code (LBM kernel ABI)
const char * prog_expr = {prog_expr}; // Original LBM rule expression
const char * prog_original = {prog_original}; // C BPF assembly

struct bpf_insn prog[] = {{
{prog}
}};

unsigned int prog_size = sizeof(prog)/sizeof(struct bpf_insn); """

    program_commas = map(lambda x: x+",", program)
    program_commas_str = "\n".join(map(lambda x: "\"" + x + "\\n\"", program_commas))
    program_commas = "\n".join(program_commas)

    program_expr = expression.replace("\\", "\\\\").replace("\"", "\\\"")
    program_expr = program_expr.split("\n")
    program_expr_str = "\n".join(map(lambda x: "\"" + x + "\\n\"", program_expr))

    c_program = program_template.format(prog_name=program_output_name, prog_subsystem = subsystem,
            prog_expr=program_expr_str, prog_file=program_source_file, prog_original=program_commas_str, prog=program_commas)

    proc = subprocess.Popen(["gcc", "-shared", "-fpic", "-fpie", "-o", program_output_name + ".so", "-x", "c", "-"],
            stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    stdout, _ = proc.communicate(c_program)

    if len(stdout) > 0:
        print("Failed to compile LBM program. This is an internal error. Use --debug for more information.")

        if debug:
            print("GCC output: " + stdout)

        return

    if save_intermediates:
        fp = open(program_output_name + ".c", "w")
        fp.write(c_program)
        fp.close()

    os.rename(program_output_name + ".so", program_output_name + ".lbm")

def main():
    parser = argparse.ArgumentParser(description="LBM frontend expression compiler")
    parser.add_argument("--output", "-o", help="Compiled LBM program output file")
    parser.add_argument("--save-intermediates", help="Save intermediate LBM files when compiling",
            action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--expression", help="Provide a single line expression directly. Useful for testing",
            action="store_true")
    parser.add_argument("lbm_program", help="A LBM program file for compilation")

    args = parser.parse_args()

    try:
        if args.expression:
            lbm_raw_program = args.lbm_program
            source_file = "<stdin>"
        else:
            lbm_raw_program = open(args.lbm_program, 'r').read()
            source_file = args.lbm_program

        program, subsystem = lbm.parse_and_assemble(lbm_raw_program, args.debug)

        if args.output:
            save_program(program, subsystem, args.output, source_file,
                    lbm_raw_program, args.debug, args.save_intermediates)
        else:
            # Print the program
            for insn in program:
                print "%s," % (insn)
    except ValueError as e:
        if args.debug:
            raise
        else:
            print("error: %s" % e.message)
    except IOError as e:
        if args.debug:
            raise
        else:
            print("error: %s" % e.message)

if __name__ == "__main__":
    main()
